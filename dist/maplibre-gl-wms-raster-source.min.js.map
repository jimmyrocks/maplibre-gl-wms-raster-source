{"version":3,"file":"maplibre-gl-wms-raster-source.min.js","sources":["../../src/index.ts"],"sourcesContent":["import {\n    default as maplibregl,\n    RasterSourceSpecification\n} from 'maplibre-gl';\n\ntype MapLibrary = typeof maplibregl;\n\nexport interface RasterCustomProtocolSourceSpecificationType extends Omit<RasterSourceSpecification, \"tiles\" | \"url\" | \"type\" | \"scheme\"> {\n    url: string,\n    version?: '1.0.0' | '1.1.0' | '1.1.1' | '1.3.0',\n    layers: Array<string>,\n    styles?: Array<string>,\n    format?: 'image/png' | 'image/png8' | 'image/jpeg' | 'image/vnd.jpeg-png' | 'image/vnd.jpeg-png8',\n    transparent?: boolean,\n    bgcolor?: string,\n    exceptions?: string,\n    time?: string,\n    sld?: string,\n    sld_body?: string\n};\n\nexport interface GeoServerGetMapBase {\n    service: 'WMS',\n    version: '1.0.0' | '1.1.0' | '1.1.1' | '1.3.0',\n    request: 'GetMap',\n    layers: string,\n    styles: string,\n    crs?: string,\n    srs?: string,\n    bbox: string, // [minx, miny, maxx, maxy]\n    width: number,\n    height: number,\n    format: 'image/png' | 'image/png8' | 'image/jpeg' | 'image/vnd.jpeg-png' | 'image/vnd.jpeg-png8',\n    transparent?: boolean,\n    bgcolor?: string,\n    exceptions?: string | 'application/vnd.ogc.se_xml',\n    time?: string,\n    sld?: string,\n    sld_body?: string\n};\n\nexport default function WMSRasterSourceType(mapLibrary: MapLibrary) {\n    return class RasterCustomProtocolSourceSpecification extends mapLibrary.Style.getSourceType('raster') {\n\n        constructor(layerName: string, params: RasterCustomProtocolSourceSpecificationType) {\n            const superParams: RasterSourceSpecification = {\n                type: \"raster\",\n                bounds: params.bounds,\n                minzoom: params.minzoom,\n                maxzoom: params.maxzoom,\n                tileSize: params.tileSize || 256,\n                attribution: params.attribution,\n                volatile: params.volatile\n            };\n\n            const WMSRasterParams: GeoServerGetMapBase = {\n                service: 'WMS',\n                version: params.version || '1.1.1',\n                request: 'GetMap',\n                layers: params.layers.join(','),\n                styles: params.styles ? params.styles.join(',') : '',\n                bbox: '{bbox-epsg-3857}',\n                width: params.tileSize || 256,\n                height: params.tileSize || 256,\n                format: params.format || 'image/png',\n                transparent: params.transparent,\n                bgcolor: params.bgcolor,\n                exceptions: params.exceptions,\n                time: params.time,\n                sld: params.sld,\n                sld_body: params.sld_body\n            };\n\n            if (params.version === '1.3.0') {\n                WMSRasterParams.crs = 'EPSG:3857';\n            } else {\n                WMSRasterParams.srs = 'EPSG:3857'\n            }\n            \n            // Don't encode the bbox\n            const encode = (v: string) =>  v === WMSRasterParams.bbox ? v : encodeURIComponent(v);\n\n            superParams.tiles = [params.url + '?' + Object.keys(WMSRasterParams)\n                .map(key => (WMSRasterParams as any)[key] !== undefined && [encodeURIComponent(key), encode((WMSRasterParams as any)[key])].join('='))\n                .filter(v => v !== false)\n                .join('&')\n            ];\n\n            // Remove the undefineds\n            const cleanSuperParams = Object.keys(superParams)\n              .map(key => (superParams as any)[key] && [key, (superParams as any)[key]])\n              .filter( v => v !== undefined)\n              .reduce((a,c) => ({...a, ...{[c[0]]: c[1]}}),{});\n\n            // Swap out the 2nd argument with the cleanSuperParams, so we can leave as much of the original as possible\n            let args = [...arguments];\n            args[1] = cleanSuperParams;\n\n            super(...args);\n        }\n\n        //TODO identify function\n    }\n};"],"names":["mapLibrary","Style","getSourceType","constructor","layerName","params","superParams","type","bounds","minzoom","maxzoom","tileSize","attribution","volatile","WMSRasterParams","service","version","request","layers","join","styles","bbox","width","height","format","transparent","bgcolor","exceptions","time","sld","sld_body","crs","srs","tiles","url","Object","keys","map","key","undefined","encodeURIComponent","v","filter","cleanSuperParams","reduce","a","c","args","arguments","super"],"mappings":"oQAyC4CA,GACxC,OAAO,cAAsDA,EAAWC,MAAMC,cAAc,WAExFC,YAAYC,EAAmBC,GAC3B,MAAMC,EAAyC,CAC3CC,KAAM,SACNC,OAAQH,EAAOG,OACfC,QAASJ,EAAOI,QAChBC,QAASL,EAAOK,QAChBC,SAAUN,EAAOM,UAAY,IAC7BC,YAAaP,EAAOO,YACpBC,SAAUR,EAAOQ,UAGfC,EAAuC,CACzCC,QAAS,MACTC,QAASX,EAAOW,SAAW,QAC3BC,QAAS,SACTC,OAAQb,EAAOa,OAAOC,KAAK,KAC3BC,OAAQf,EAAOe,OAASf,EAAOe,OAAOD,KAAK,KAAO,GAClDE,KAAM,mBACNC,MAAOjB,EAAOM,UAAY,IAC1BY,OAAQlB,EAAOM,UAAY,IAC3Ba,OAAQnB,EAAOmB,QAAU,YACzBC,YAAapB,EAAOoB,YACpBC,QAASrB,EAAOqB,QAChBC,WAAYtB,EAAOsB,WACnBC,KAAMvB,EAAOuB,KACbC,IAAKxB,EAAOwB,IACZC,SAAUzB,EAAOyB,UAGE,UAAnBzB,EAAOW,QACPF,EAAgBiB,IAAM,YAEtBjB,EAAgBkB,IAAM,YAM1B1B,EAAY2B,MAAQ,CAAC5B,EAAO6B,IAAM,IAAMC,OAAOC,KAAKtB,GAC/CuB,KAAIC,IAAQxB,YAAiCyB,IAAjCzB,EAAwBwB,IAAsB,CAACE,mBAAmBF,IAHnEG,EAGiF3B,EAAwBwB,GAH1FG,IAAM3B,EAAgBO,KAAOoB,EAAID,mBAAmBC,KAG6CtB,KAAK,KAHtH,IAACsB,KAIXC,QAAOD,IAAW,IAANA,IACZtB,KAAK,MAIV,MAAMwB,EAAmBR,OAAOC,KAAK9B,GAClC+B,KAAIC,GAAQhC,EAAoBgC,IAAQ,CAACA,EAAMhC,EAAoBgC,MACnEI,QAAQD,QAAWF,IAANE,IACbG,QAAO,CAACC,EAAEC,SAAWD,EAAO,CAACC,EAAE,IAAKA,EAAE,MAAM,IAG/C,IAAIC,EAAO,IAAIC,WACfD,EAAK,GAAKJ,EAEVM,SAASF"}